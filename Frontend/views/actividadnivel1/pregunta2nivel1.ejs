<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nivel 1</title>
    <link rel="stylesheet" href="/resources/css/stylenivelpregunta2.css">
</head>
<body>
    <div class="activity-container">
        <div class="activity-info">
            <h2>Pregunta 2 - Nivel 1</h2>
            <p id="pregunta-texto"></p>
        </div>

        <div class="image-container">
            <img id="activity-image" src="/resources/images/fotopregunta1.png" alt="Imagen de la actividad">
        </div>

        <div id="message-container"></div>

        <div class="answer-container">
            <textarea id="answer-input" placeholder="Escribe tu respuesta aquí..."></textarea>
            <div class="buttons-container">
                <button id="submit-answer">Enviar Respuesta</button>
                <button id="next-activity" class="next-button" style="display: none;">Finalizar nivel 1</button>
            </div>
        </div>
    </div>

    <script src="/resources/js/preguntasService.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            const submitButton = document.getElementById('submit-answer');
            const nextButton = document.getElementById('next-activity');
            const answerInput = document.getElementById('answer-input');
            const messageContainer = document.getElementById('message-container');
            const preguntaTexto = document.getElementById('pregunta-texto');

            const PREGUNTA_ID = 4; // ID de la pregunta actual

            function showMessage(message, type) {
                messageContainer.innerHTML = `<div class="message ${type}">${message}</div>`;
            }

            function showCompletionMessage() {
                showMessage('¡Felicitaciones! Has completado todas las preguntas de este nivel. Puedes volver a la página de niveles.', 'success');
            }

            // Verificar token
            const token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/login';
                return;
            }

            // Cargar pregunta y registrar tiempo de inicio
            try {
                const pregunta = await preguntasService.getPregunta(PREGUNTA_ID, token);
                preguntaTexto.textContent = pregunta.texto;
                
                // Registrar tiempo de inicio solo si no existe
                if (!localStorage.getItem(`inicio_pregunta_${PREGUNTA_ID}`)) {
                    localStorage.setItem(`inicio_pregunta_${PREGUNTA_ID}`, new Date().toISOString());
                    console.log('Tiempo de inicio guardado:', localStorage.getItem(`inicio_pregunta_${PREGUNTA_ID}`));
                }
            } catch (error) {
                showMessage('Error al cargar la pregunta: ' + error.message, 'error');
            }

            // Verificar si ya existe una respuesta
            try {
                const { existeRespuesta, respuesta } = await preguntasService.checkRespuesta(PREGUNTA_ID, token);
                if (existeRespuesta) {
                    answerInput.value = respuesta;
                    answerInput.disabled = true;
                    submitButton.disabled = true;
                    showMessage('Ya has respondido esta pregunta', 'success');
                    nextButton.style.display = 'block';
                    // Limpiar el tiempo de inicio si ya existe una respuesta
                    localStorage.removeItem(`inicio_pregunta_${PREGUNTA_ID}`);
                }
            } catch (error) {
                console.error('Error al verificar respuesta existente:', error);
            }

            nextButton.addEventListener('click', () => {
                window.location.href = '/level2';
            });

            submitButton.addEventListener('click', async function() {
                const respuesta = answerInput.value.trim();
                
                if (!respuesta) {
                    showMessage('Por favor, escribe una respuesta antes de enviar.', 'error');
                    return;
                }

                try {
                    await preguntasService.createRespuesta(PREGUNTA_ID, respuesta, token);
                    showMessage('Respuesta enviada correctamente', 'success');
                    
                    // Mostrar mensaje de finalización
                    showCompletionMessage();
                    
                    // Deshabilitar el input y el botón de enviar
                    answerInput.disabled = true;
                    submitButton.disabled = true;
                    
                    // Mostrar el botón para volver a niveles
                    nextButton.style.display = 'block';
                    
                } catch (error) {
                    showMessage('Error al enviar la respuesta: ' + error.message, 'error');
                }
            });
        });
    </script>
</body>
</html>
