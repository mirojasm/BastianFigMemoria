<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nivel 2</title>
    <link rel="stylesheet" href="/resources/css/stylenivel2pregunta1.css">
</head>
<body>
    <div class="activity-container">
        <div class="activity-info">
            <h2>Pregunta 1 - Nivel 2</h2>
            <p id="pregunta-texto">Cargando pregunta...</p>
        </div>

        <div class="text-container">
            <div id="activity-text">
                <p>La primera vez que vi la lluvia fue una tarde de verano en un patio interior. Ese patio era un mundo completo, con una fuente de pajaros en el centro, muchas flores y un viejo naranjo con el tronco blanco. Yo me hallaba contenta contemplando aquel árbol tan raro, cuyas hojas eran como una sustancia verde y tenía algunas frutas tan grandes y redondas como bolas de billar. De pronto escuché un ruido  sobre los techos de las casas vecinas, el cielo se oscureció y empezaron a caer gotas de agua fría, después fue un diluvio.</p>
                <p>Aquello me pareció extraordinario, un sonido aterrador y maravilloso. El patio se inundó de inmediato, los caminos se convirtieron en pequeños lagos, el naranjo sacudía sus ramas mojadas y enormes gotas rebotaban en el suelo y sobre la fuente. Me acurruqué en un rincón, me encontraba con miedo porque creí que el mundo se estaba rompiendo. Mi madre me tomó en sus brazos para tranquilizarme, me asomó al patio y me dijo que no tuviera miedo, que eso era sólo la lluvia, un fenómeno natural tan lindo como el sol.</p>
            </div>
        </div>

        <div id="message-container"></div>

        <div class="answer-container">
            <div class="answer-wrapper">
                <textarea 
                    id="answer-input" 
                    placeholder="Escribe tu respuesta aquí... (mínimo 10 caracteres, máximo 200)"
                    maxlength="200"
                ></textarea>
                <div class="character-counter">0/200</div>
            </div>
            <div class="buttons-container">
                <button id="submit-answer" disabled>Enviar Respuesta</button>
                <button id="next-activity" class="next-button" style="display: none;">Siguiente Pregunta</button>
            </div>
        </div>
    </div>

    <script src="/resources/js/preguntasService.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            const submitButton = document.getElementById('submit-answer');
            const nextButton = document.getElementById('next-activity');
            const answerInput = document.getElementById('answer-input');
            const messageContainer = document.getElementById('message-container');
            const preguntaTexto = document.getElementById('pregunta-texto');
            const characterCounter = document.querySelector('.character-counter');

            const PREGUNTA_ID = 5;

            // Character counter functionality
            function updateCharacterCount() {
                const currentLength = answerInput.value.length;
                characterCounter.textContent = `${currentLength}/200`;
                
                // Update counter color and input validation
                if (currentLength < 10 || currentLength > 200) {
                    characterCounter.classList.add('error');
                    answerInput.classList.add('invalid');
                    submitButton.disabled = true;
                } else {
                    characterCounter.classList.remove('error');
                    answerInput.classList.remove('invalid');
                    submitButton.disabled = false;
                }
            }

            // Add input event listener for real-time character counting
            answerInput.addEventListener('input', updateCharacterCount);

            function showMessage(message, type) {
                messageContainer.innerHTML = `<div class="message ${type}">${message}</div>`;
            }

            // Verificar token
            const token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/login';
                return;
            }

            // Cargar pregunta y registrar tiempo de inicio
            try {
                const pregunta = await preguntasService.getPregunta(PREGUNTA_ID, token);
                preguntaTexto.textContent = pregunta.texto;

                // Registrar tiempo de inicio solo si no existe
                if (!localStorage.getItem(`inicio_pregunta_${PREGUNTA_ID}`)) {
                    localStorage.setItem(`inicio_pregunta_${PREGUNTA_ID}`, new Date().toISOString());
                    console.log('Tiempo de inicio guardado:', localStorage.getItem(`inicio_pregunta_${PREGUNTA_ID}`));
                }
            } catch (error) {
                showMessage('Error al cargar la pregunta: ' + error.message, 'error');
            }

            // Verificar si ya existe una respuesta
            try {
                const { existeRespuesta, respuesta } = await preguntasService.checkRespuesta(PREGUNTA_ID, token);
                if (existeRespuesta) {
                    answerInput.value = respuesta;
                    updateCharacterCount(); // Update counter for existing response
                    answerInput.disabled = true;
                    submitButton.disabled = true;
                    showMessage('Ya has respondido esta pregunta', 'success');
                    nextButton.style.display = 'block';
                    // Limpiar el tiempo de inicio si ya existe una respuesta
                    localStorage.removeItem(`inicio_pregunta_${PREGUNTA_ID}`);
                }
            } catch (error) {
                console.error('Error al verificar respuesta existente:', error);
            }

            nextButton.addEventListener('click', () => {
                window.location.href = '/actividadnivel2/pregunta2nivel2';
            });

            submitButton.addEventListener('click', async function() {
                const respuesta = answerInput.value.trim();
                
                if (respuesta.length < 10) {
                    showMessage('La respuesta debe tener al menos 10 caracteres.', 'error');
                    return;
                }

                if (respuesta.length > 200) {
                    showMessage('La respuesta no puede exceder los 200 caracteres.', 'error');
                    return;
                }

                try {
                    await preguntasService.createRespuesta(PREGUNTA_ID, respuesta, token);
                    showMessage('Respuesta enviada correctamente', 'success');
                    
                    // Deshabilitar input y botón después de enviar
                    answerInput.disabled = true;
                    submitButton.disabled = true;
                    
                    // Mostrar el botón de siguiente
                    nextButton.style.display = 'block';
                } catch (error) {
                    showMessage('Error al enviar la respuesta: ' + error.message, 'error');
                }
            });

            // Initial character count update
            updateCharacterCount();
        });
    </script>
</body>
</html>