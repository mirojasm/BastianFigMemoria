<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Análisis de Aprendizaje Detallado</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
    <!-- Navbar se mantiene igual -->
    <nav class="bg-white shadow-md">
        <div class="container mx-auto px-4 py-3 flex justify-between items-center">
            <div>
                <h2 class="text-lg">
                    Bienvenido, <span id="username" class="font-semibold">Usuario</span> 
                    de <span id="userSchool" class="font-semibold">Colegio</span>
                </h2>
            </div>
            <div class="space-x-4">
                <a href="/feedback" 
                   class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors">
                    Ver Feedback General
                </a>
                <button id="cerrarSesion" 
                        class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors">
                    Cerrar Sesión
                </button>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-6">Análisis Detallado de tu Aprendizaje</h1>
        
        <!-- Alerta de Respuestas Pendientes -->
        <div id="alertaRespuestasPendientes" class="hidden mb-6">
            <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-yellow-800">Respuestas Pendientes</h3>
                        <div class="mt-2 text-sm text-yellow-700">
                            <p>Tienes preguntas pendientes por responder:</p>
                            <ul class="list-disc list-inside mt-1" id="listaPreguntasPendientes"></ul>
                        </div>
                        <div class="mt-4">
                            <button id="btnVolverPreguntas" class="bg-yellow-100 text-yellow-800 px-4 py-2 rounded hover:bg-yellow-200 transition-colors">
                                Volver a las preguntas
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Estado de Progreso -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Progreso de Respuestas</h2>
            <div class="w-full bg-gray-200 rounded-full h-4 mb-4">
                <div id="progressBar" class="bg-blue-600 h-4 rounded-full transition-all duration-500" style="width: 0%"></div>
            </div>
            <p id="progressText" class="text-sm text-gray-600"></p>
        </div>

        <!-- Resumen Estadístico -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Resumen Estadístico</h2>
            <div class="grid grid-cols-3 gap-4">
                <div class="bg-blue-50 p-4 rounded">
                    <p class="text-sm text-blue-600">Total de Preguntas</p>
                    <p class="text-2xl font-bold" id="totalPreguntas">-</p>
                </div>
                <div class="bg-green-50 p-4 rounded">
                    <p class="text-sm text-green-600">Preguntas Individuales</p>
                    <p class="text-2xl font-bold" id="preguntasIndividuales">-</p>
                </div>
                <div class="bg-purple-50 p-4 rounded">
                    <p class="text-sm text-purple-600">Preguntas Colaborativas</p>
                    <p class="text-2xl font-bold" id="preguntasColaborativas">-</p>
                </div>
            </div>
        </div>
        
        <!-- Feedback Elaborado -->
        <div id="contenedorFeedback" class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Análisis Detallado</h2>
            <div id="feedbackElaborado" class="prose max-w-none">
                <div class="animate-pulse">
                    <div class="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                    <div class="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
                    <div class="h-4 bg-gray-200 rounded w-5/6"></div>
                </div>
            </div>
        </div>
        
        <!-- Detalle por Pregunta -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-xl font-semibold mb-4">Detalle por Pregunta</h2>
            <div id="preguntasDetalle" class="space-y-6">
                <!-- Las preguntas se cargarán aquí -->
            </div>
        </div>
    </div>

    <script>
        // Configuración de las preguntas
        const CONFIG_PREGUNTAS = {
            COLABORATIVAS: [1, 2],
            INDIVIDUALES: [3, 4, 5, 6],
            TOTAL_PREGUNTAS: 6
        };

        // Funciones de utilidad
        const getUserInfo = () => {
            const userInfo = localStorage.getItem('userInfo');
            return userInfo ? JSON.parse(userInfo) : null;
        };

        const displayUserInfo = () => {
            const userInfo = getUserInfo();
            if (userInfo) {
                document.getElementById('username').textContent = userInfo.nombre || 'Usuario';
                document.getElementById('userSchool').textContent = userInfo.establecimiento || 'Colegio';
            } else {
                window.location.href = '/login';
            }
        };

        const cerrarSesion = () => {
            localStorage.removeItem('userInfo');
            localStorage.removeItem('token');
            window.location.href = '/login';
        };

        const actualizarBarraProgreso = (respondidas, total) => {
            const porcentaje = (respondidas / total) * 100;
            const progressBar = document.getElementById('progressBar');
            const progressText = document.getElementById('progressText');
            
            progressBar.style.width = `${porcentaje}%`;
            progressText.textContent = `${respondidas} de ${total} preguntas respondidas (${porcentaje.toFixed(1)}%)`;
            
            if (porcentaje === 100) {
                progressBar.classList.remove('bg-blue-600', 'bg-yellow-500');
                progressBar.classList.add('bg-green-500');
            } else if (porcentaje >= 50) {
                progressBar.classList.remove('bg-blue-600', 'bg-green-500');
                progressBar.classList.add('bg-yellow-500');
            }
        };

        const mostrarPreguntasPendientes = (faltantes) => {
            const alertaContainer = document.getElementById('alertaRespuestasPendientes');
            const listaContainer = document.getElementById('listaPreguntasPendientes');
            
            if (faltantes.individuales.length > 0 || faltantes.colaborativas.length > 0) {
                let listHTML = '';
                
                if (faltantes.individuales.length > 0) {
                    listHTML += `<li>Preguntas individuales: ${faltantes.individuales.join(', ')}</li>`;
                }
                if (faltantes.colaborativas.length > 0) {
                    listHTML += `<li>Preguntas colaborativas: ${faltantes.colaborativas.join(', ')}</li>`;
                }
                
                listaContainer.innerHTML = listHTML;
                alertaContainer.classList.remove('hidden');
                document.getElementById('contenedorFeedback').classList.add('hidden');
            } else {
                alertaContainer.classList.add('hidden');
                document.getElementById('contenedorFeedback').classList.remove('hidden');
            }
        };

        async function cargarFeedbackElaborado() {
            try {
                const userInfo = getUserInfo();
                if (!userInfo || !userInfo.id) {
                    throw new Error('No se encontró información del usuario');
                }

                const token = localStorage.getItem('token');
                if (!token) {
                    throw new Error('No se encontró token de autenticación');
                }
                
                const response = await fetch('http://localhost:3001/api/feedback/elaborado', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.error || 'Error al obtener el feedback elaborado');
                }

                const data = await response.json();
                
                // Manejar caso de respuestas incompletas
                if (data.error && data.faltantes) {
                    mostrarPreguntasPendientes(data.faltantes);
                    actualizarBarraProgreso(
                        CONFIG_PREGUNTAS.TOTAL_PREGUNTAS - (data.faltantes.individuales.length + data.faltantes.colaborativas.length),
                        CONFIG_PREGUNTAS.TOTAL_PREGUNTAS
                    );
                    return;
                }

                // Actualizar progreso
                actualizarBarraProgreso(data.resumenEstadistico.preguntasAnalizadas, CONFIG_PREGUNTAS.TOTAL_PREGUNTAS);
                
                // Actualizar resumen estadístico
                const stats = data.resumenEstadistico || {};
                document.getElementById('totalPreguntas').textContent = stats.totalPreguntas || '0';
                document.getElementById('preguntasIndividuales').textContent = stats.preguntasIndividuales || '0';
                document.getElementById('preguntasColaborativas').textContent = stats.preguntasColaborativas || '0';
                
                // Actualizar feedback elaborado
                document.getElementById('feedbackElaborado').innerHTML = data.feedbackElaborado.replace(/\n/g, '<br>');
                
                // Actualizar detalle de preguntas con historial de chat
                const preguntas = data.preguntasAnalizadas || [];
                const detalleHTML = preguntas.map((p) => `
                    <div class="border-b pb-6 last:border-0">
                        <h3 class="font-semibold text-lg mb-4">Pregunta ${p.preguntaId}</h3>
                        <div class="bg-gray-50 p-4 rounded mb-4">
                            <p class="font-medium">Pregunta:</p>
                            <p class="mt-1">${p.pregunta || 'No disponible'}</p>
                        </div>
                        
                        ${p.tipo === 'individual' ? `
                            <div class="bg-blue-50 p-4 rounded">
                                <p class="font-medium text-blue-700">Respuesta Individual:</p>
                                <p class="mt-1">${p.respuestaIndividual || 'No disponible'}</p>
                            </div>
                        ` : `
                            <div class="bg-green-50 p-4 rounded mb-4">
                                <p class="font-medium text-green-700">Respuesta Colaborativa:</p>
                                <p class="mt-1">${p.respuestaFinal || 'No disponible'}</p>
                                ${p.compañero !== 'No asignado' ? `
                                    <div class="mt-2">
                                        <p class="text-sm text-green-600">Compañero: ${p.compañero}</p>
                                        <p class="text-sm text-green-600">Rol: ${p.rolEstudiante}</p>
                                    </div>
                                ` : ''}
                                ${p.historialChat ? `
                                    <div class="mt-4 border-t pt-4">
                                        <p class="font-medium text-green-700">Historial de Chat:</p>
                                        <div class="mt-2 max-h-60 overflow-y-auto">
                                            ${p.historialChat.map(msg => `
                                                <div class="mb-2 ${msg.emisor === 'Estudiante' ? 'text-right' : 'text-left'}">
                                                    <span class="inline-block px-3 py-2 rounded-lg ${
                                                        msg.emisor === 'Estudiante' 
                                                        ? 'bg-blue-100 text-blue-800' 
                                                        : 'bg-gray-100 text-gray-800'
                                                    }">
                                                        <small class="block text-xs opacity-75">${msg.emisor}</small>
                                                        ${msg.mensaje}
                                                    </span>
                                                </div>
                                            `).join('')}
                                        </div>
                                    </div>
                                ` : ''}
                            </div>
                        `}
                    </div>
                `).join('');
                
                document.getElementById('preguntasDetalle').innerHTML = 
                    detalleHTML || '<p class="text-gray-500 italic">No hay preguntas disponibles para mostrar</p>';

            } catch (error) {
                console.error('Error cargando feedback:', error);
                const errorMessage = error.message === 'No se encontró información del usuario' || 
                                   error.message === 'No se encontró token de autenticación'
                    ? 'Sesión expirada. Redirigiendo al login...'
                    : 'Error al cargar el análisis detallado. Por favor, intenta de nuevo.';

                document.getElementById('feedbackElaborado').innerHTML = `
                    <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
                        ${errorMessage}
                    </div>`;

                if (errorMessage.includes('Sesión expirada')) {
                    setTimeout(() => {
                        window.location.href = '/login';
                    }, 2000);
                }
            }
        }

        // Inicializar la página
        document.addEventListener('DOMContentLoaded', () => {
            displayUserInfo();
            document.getElementById('cerrarSesion').addEventListener('click', cerrarSesion);
            document.getElementById('btnVolverPreguntas').addEventListener('click', () => {
                window.location.href = '/preguntas';
            });
            cargarFeedbackElaborado();
        });
    </script>
</body>
</html>